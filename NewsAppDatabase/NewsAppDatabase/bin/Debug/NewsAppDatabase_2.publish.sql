/*
Deployment script for NewsAppDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "NewsAppDB"
:setvar DefaultFilePrefix "NewsAppDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Article]...';


GO
CREATE TABLE [dbo].[Article] (
    [ArticleID]      UNIQUEIDENTIFIER NOT NULL,
    [ArticleTitle]   NVARCHAR (150)   NOT NULL,
    [ArticleContent] NVARCHAR (MAX)   NOT NULL,
    [CategoryID]     UNIQUEIDENTIFIER NOT NULL,
    [UserID]         UNIQUEIDENTIFIER NOT NULL,
    [Date]           DATETIME2 (7)    NOT NULL,
    [ArticleRateing] INT              NOT NULL,
    [isDeleted]      BIT              NOT NULL,
    [isEdited]       BIT              NOT NULL,
    [isEditing]      BIT              NOT NULL,
    CONSTRAINT [Pk_Article_ArticleID] PRIMARY KEY CLUSTERED ([ArticleID] ASC)
);


GO
PRINT N'Creating Table [dbo].[ArticleComment]...';


GO
CREATE TABLE [dbo].[ArticleComment] (
    [ArticleID] UNIQUEIDENTIFIER NOT NULL,
    [UserID]    UNIQUEIDENTIFIER NOT NULL,
    [CommentID] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [Pk_ArticleComment_ArticleIDUserIDCommentID] PRIMARY KEY CLUSTERED ([ArticleID] ASC, [UserID] ASC, [CommentID] ASC)
);


GO
PRINT N'Creating Table [dbo].[ArticlePicture]...';


GO
CREATE TABLE [dbo].[ArticlePicture] (
    [ArticleID] UNIQUEIDENTIFIER NOT NULL,
    [PictureID] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [Pk_ArticlePicture_ArticleIDPictureID] PRIMARY KEY CLUSTERED ([ArticleID] ASC, [PictureID] ASC)
);


GO
PRINT N'Creating Table [dbo].[ArticleTag]...';


GO
CREATE TABLE [dbo].[ArticleTag] (
    [ArticleID] UNIQUEIDENTIFIER NOT NULL,
    [TagID]     UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [Pk_ArticleTag_ArticleIDTagID] PRIMARY KEY CLUSTERED ([ArticleID] ASC, [TagID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [CategoryID]          UNIQUEIDENTIFIER NOT NULL,
    [CategoryName]        NVARCHAR (50)    NOT NULL,
    [CategoryDescription] NVARCHAR (MAX)   NULL,
    CONSTRAINT [Pk_Category_CategoryID] PRIMARY KEY CLUSTERED ([CategoryID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Comment]...';


GO
CREATE TABLE [dbo].[Comment] (
    [CommentID]        UNIQUEIDENTIFIER NOT NULL,
    [CommentContent]   NVARCHAR (MAX)   NOT NULL,
    [UpVoteCount]      INT              NOT NULL,
    [DownVoteCount]    INT              NOT NULL,
    [CommentIsDeleted] BIT              NOT NULL,
    [CommentDate]      DATETIME2 (7)    NOT NULL,
    [ParentCommentID]  UNIQUEIDENTIFIER NULL,
    CONSTRAINT [Pk_Comment_CommentID] PRIMARY KEY CLUSTERED ([CommentID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Picture]...';


GO
CREATE TABLE [dbo].[Picture] (
    [PictureID]          UNIQUEIDENTIFIER NOT NULL,
    [PictureURL]         NVARCHAR (MAX)   NOT NULL,
    [PictureDescription] NVARCHAR (300)   NOT NULL,
    CONSTRAINT [Pk_Picture_PictureID] PRIMARY KEY CLUSTERED ([PictureID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Priviledge]...';


GO
CREATE TABLE [dbo].[Priviledge] (
    [PriviledgeID]          UNIQUEIDENTIFIER NOT NULL,
    [PriviledgeName]        NVARCHAR (50)    NOT NULL,
    [PriviledgeDescription] NVARCHAR (MAX)   NULL,
    CONSTRAINT [Pk_Priviledge_PriviledgeID] PRIMARY KEY CLUSTERED ([PriviledgeID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [RoleID]         UNIQUEIDENTIFIER NOT NULL,
    [RoleName]       INT              NOT NULL,
    [RoleDesription] NVARCHAR (50)    NULL,
    CONSTRAINT [Pk_Role_RoleID] PRIMARY KEY CLUSTERED ([RoleID] ASC)
);


GO
PRINT N'Creating Table [dbo].[RolePriviledge]...';


GO
CREATE TABLE [dbo].[RolePriviledge] (
    [RoleID]       UNIQUEIDENTIFIER NOT NULL,
    [PriviledgeID] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [Pk_RolePriviledge_RoleIDPriviledgeID] PRIMARY KEY CLUSTERED ([RoleID] ASC, [PriviledgeID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Tag]...';


GO
CREATE TABLE [dbo].[Tag] (
    [TagID]   UNIQUEIDENTIFIER NOT NULL,
    [TagName] NVARCHAR (25)    NOT NULL,
    CONSTRAINT [Pk_Tag_TagID] PRIMARY KEY CLUSTERED ([TagID] ASC)
);


GO
PRINT N'Creating Table [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [UserID]    UNIQUEIDENTIFIER NOT NULL,
    [Username]  NVARCHAR (50)    NOT NULL,
    [Password]  NVARCHAR (MAX)   NOT NULL,
    [FirstName] NVARCHAR (50)    NOT NULL,
    [LastName]  NVARCHAR (50)    NOT NULL,
    [Email]     NVARCHAR (100)   NOT NULL,
    CONSTRAINT [Pk_User_UserID] PRIMARY KEY CLUSTERED ([UserID] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [UserID] UNIQUEIDENTIFIER NOT NULL,
    [RoleID] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [Pk_UserRole_UserIDRoleID] PRIMARY KEY CLUSTERED ([UserID] ASC, [RoleID] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Category_Article_CategoryID]...';


GO
ALTER TABLE [dbo].[Article]
    ADD CONSTRAINT [Fk_Category_Article_CategoryID] FOREIGN KEY ([CategoryID]) REFERENCES [dbo].[Category] ([CategoryID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_User_Article_UserID]...';


GO
ALTER TABLE [dbo].[Article]
    ADD CONSTRAINT [Fk_User_Article_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[User] ([UserID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Article_ArticleComment_ArticleID]...';


GO
ALTER TABLE [dbo].[ArticleComment]
    ADD CONSTRAINT [Fk_Article_ArticleComment_ArticleID] FOREIGN KEY ([ArticleID]) REFERENCES [dbo].[Article] ([ArticleID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_User_ArticleComment_UserID]...';


GO
ALTER TABLE [dbo].[ArticleComment]
    ADD CONSTRAINT [Fk_User_ArticleComment_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[User] ([UserID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Comment_ArticleComment_CommentID]...';


GO
ALTER TABLE [dbo].[ArticleComment]
    ADD CONSTRAINT [Fk_Comment_ArticleComment_CommentID] FOREIGN KEY ([CommentID]) REFERENCES [dbo].[Comment] ([CommentID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Article_ArticlePicture_ArticleID]...';


GO
ALTER TABLE [dbo].[ArticlePicture]
    ADD CONSTRAINT [Fk_Article_ArticlePicture_ArticleID] FOREIGN KEY ([ArticleID]) REFERENCES [dbo].[Article] ([ArticleID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Picture_ArticlePicture_PictureID]...';


GO
ALTER TABLE [dbo].[ArticlePicture]
    ADD CONSTRAINT [Fk_Picture_ArticlePicture_PictureID] FOREIGN KEY ([PictureID]) REFERENCES [dbo].[Picture] ([PictureID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Article_ArticleTag_ArticleID]...';


GO
ALTER TABLE [dbo].[ArticleTag]
    ADD CONSTRAINT [Fk_Article_ArticleTag_ArticleID] FOREIGN KEY ([ArticleID]) REFERENCES [dbo].[Article] ([ArticleID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Tag_ArticleTag_TagID]...';


GO
ALTER TABLE [dbo].[ArticleTag]
    ADD CONSTRAINT [Fk_Tag_ArticleTag_TagID] FOREIGN KEY ([TagID]) REFERENCES [dbo].[Tag] ([TagID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Role_RolePriviledge_RoleID]...';


GO
ALTER TABLE [dbo].[RolePriviledge]
    ADD CONSTRAINT [Fk_Role_RolePriviledge_RoleID] FOREIGN KEY ([RoleID]) REFERENCES [dbo].[Role] ([RoleID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Priviledge_RolePriviledge_PriviledgeID]...';


GO
ALTER TABLE [dbo].[RolePriviledge]
    ADD CONSTRAINT [Fk_Priviledge_RolePriviledge_PriviledgeID] FOREIGN KEY ([PriviledgeID]) REFERENCES [dbo].[Priviledge] ([PriviledgeID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_User_UserRole_UserID]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD CONSTRAINT [Fk_User_UserRole_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[User] ([UserID]);


GO
PRINT N'Creating Foreign Key [dbo].[Fk_Role_UserRole_RoleID]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD CONSTRAINT [Fk_Role_UserRole_RoleID] FOREIGN KEY ([RoleID]) REFERENCES [dbo].[Role] ([RoleID]);


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
